{"version":3,"sources":["components/NavBar/NavBarStyle.tsx","components/NavBar/NavBar.tsx","api/searchRepositories.tsx","components/Contributors/Contributors.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styledComponents","div","_templateObject","Header","_templateObject2","HeaderTitle","span","_templateObject3","HeaderItem","header","_templateObject4","HeaderItemFull","_templateObject5","NavLinkWrapper","_templateObject6","NavLink","_templateObject7","NoDecor","styled","a","_templateObject8","NavBar","react","href","searchRepositories","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","language","sortBy","orderBy","starsCount","starsCondition","URL","repos","_args","arguments","wrap","_context","prev","next","length","undefined","concat","console","log","fetch","sent","abrupt","json","then","repo","stop","apply","this","take","TabularData","props","data","map","t","imageUrl","owner","avatar_url","src","width","height","alt","html_url","name","Contributors","prop","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","publicRepositories","totalCount","getPublicRepositories","bind","assertThisInitialized","setState","items","total_count","Contributors_TabularData","React","App","react_default","createElement","className","components_NavBar_NavBar","Contributors_Contributors","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d88c4a1.chunk.js","sourcesContent":["import styledComponents from \"styled-components\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styledComponents.div`\n  position: relative!important;\n  background: #23282e;\n  height: 64px;\n  color: #FFF;\n`;\n\nconst Header = styledComponents.div`\n  align-items: center;\n  display: flex;\n  flex-wrap: nowrap;\n  background-color: #24292e;\n  color: hsla(0,0%,100%,.7);\n  font-size: 14px;\n  line-height: 1.5;\n  padding: 16px;\n  z-index: 32;\n`;\n\nconst HeaderTitle = styledComponents.span`\n  font-family: hack;\n  font-size: 16px;\n  font-weight: 600;\n  color: #FFF;\n  :hover {\n    color: #97a2a4;\n  }\n`;\n\nconst HeaderItem = styledComponents.header`\n  align-items: center;\n  display: flex;\n  flex-wrap: nowrap;\n  align-self: stretch;\n  margin-right: 16px;\n`;\n\nconst HeaderItemFull = styledComponents.div`\n  ${HeaderItem};\n  flex: auto;\n`;\n\nconst NavLinkWrapper = styledComponents.div`\n  display: flex!important;\n`;\n\nconst NavLink = styledComponents.div`\n  margin-right: 16px;\n  color: #fff;\n  font-weight: 600;\n  white-space: nowrap;\n  :hover {\n    color: #97a2a4;\n  }\n`;\n\nconst NoDecor = styled.a`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport {\n  Wrapper,\n  Header,\n  HeaderTitle,\n  HeaderItem,\n  HeaderItemFull,\n  NavLinkWrapper,\n  NavLink,\n  NoDecor\n};\n","import * as React from \"react\";\nimport {Wrapper, Header, HeaderTitle, HeaderItem, HeaderItemFull, NavLinkWrapper, NavLink, NoDecor} from \"./NavBarStyle\";\n\nconst NavBar: React.FC = () => {\n  return (\n    <Wrapper>\n      <Header>\n        <HeaderItem>\n          <HeaderTitle>\n            <NoDecor href=\"https://lakkanna.github.io/contributors.board/\"> Contributors Rank Board </NoDecor>\n          </HeaderTitle>\n        </HeaderItem>\n        <HeaderItemFull>\n        </HeaderItemFull>\n        <HeaderItem>\n          <NavLinkWrapper>\n            <NavLink> <NoDecor href=\"https://github.com/Lakkanna/contributors.board\"> Contribute Now </NoDecor> </NavLink>\n            <NavLink> Signin </NavLink>\n          </NavLinkWrapper>\n        </HeaderItem>\n      </Header>\n    </Wrapper>\n  );\n};\n\nexport default NavBar;\n","\nconst searchRepositories = async (language = \"javascript\", sortBy = \"stars\", orderBy = \"desc\", starsCount = 100, starsCondition = \">\") => {\n    let URL = \"https://api.github.com/search/repositories\";\n    URL += `?q=stars:${starsCondition}${starsCount}+language:${language}&sort=${sortBy}&order=${orderBy}`;\n    console.log(\"URL fetching: \", URL);\n\n    const repos = await fetch(URL);\n    return repos.json().then(repo => {\n        console.log(\"Repositories \", repo);\n        return repo;\n    });\n};\n\nexport default searchRepositories;\n","import * as React from \"react\";\nimport searchRepositories from \"../../api/searchRepositories\";\n\nconst take = [\"owner.avatar_url\", \"created_at\", \"name\", \"description\", \"stargazers_count\"];\n\nconst getImage = (imageUrl) => {\n  return <img src={imageUrl} width=\"50px\" height=\"50px\" alt={imageUrl} />;\n};\n\nconst TabularData = (props) => {\n  return (\n    <table>\n      <tr>\n        <th></th>\n        <th> Created At </th>\n        <th> Repository Name </th> \n        <th> Description </th>\n        <th> Stars </th>\n      </tr>\n       {\n         props.data.map(repo => <tr> { take.map(t => <td> { t === \"owner.avatar_url\" ? getImage(repo.owner.avatar_url) : t === \"name\" ? <a href={repo.html_url}>{repo.name}</a> : repo[t]} </td>) } </tr>)\n       }\n    </table>\n  );\n};\n\nexport default class Contributors extends React.Component {\n  constructor(prop) {\n    super(prop);\n    this.state = {\n      publicRepositories: [],\n      totalCount: 0\n    }\n\n    this.getPublicRepositories = this.getPublicRepositories.bind(this);\n  }\n  async getPublicRepositories() {\n    const data = await searchRepositories();\n    if (data) {\n      this.setState({\n        publicRepositories: data.items ? data.items : [],\n        totalCount: data.total_count ? data.total_count : 0\n      })\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"component did mount\");\n    this.getPublicRepositories();\n  }\n\n  render() {\n    return <TabularData data={this.state.publicRepositories} /> ;\n  }\n}","import React from 'react';\nimport NavBar from './components/NavBar/NavBar';\nimport Contributors from \"./components/Contributors/Contributors\";\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <div className=\"col-sm-12\">\n        <div className=\"content pagehead repohead\">\n        <div className=\"row\">\n          <div className=\"col-sm-1 side\">\n          </div>\n          <div className=\"col-sm-8 content-text\">\n            <b>List of contributors for the repository, sorted based on number commits of major bugs. Click on Contributors name to get report of contribution and history on other open source projects.</b>\n          </div>\n          <div className=\"col-sm-1 side\">\n          </div>\n        </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-1 side\">\n          </div>\n          <div className=\"col-sm-8 content-text\">\n            <Contributors />\n          </div>\n          <div className=\"col-sm-1 side\">\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}