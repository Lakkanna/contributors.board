{"version":3,"sources":["components/NavBar/NavBarStyle.tsx","components/NavBar/NavBar.tsx","api/searchRepositories.tsx","commonComponents/RepositoryCard/RepositoryCardStyle.tsx","commonComponents/Badge/Badge.tsx","commonComponents/RepositoryCard/RepositoryCard.tsx","components/Repositories/Repositories.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","_templateObject","Header","_templateObject2","HeaderTitle","span","_templateObject3","HeaderItem","header","_templateObject4","HeaderItemFull","_templateObject5","NavLinkWrapper","_templateObject6","NavLink","_templateObject7","NoDecor","a","_templateObject8","NavBar","react","href","searchRepositories","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","language","sortBy","orderBy","starsCount","starsCondition","URL","repos","_args","arguments","wrap","_context","prev","next","length","undefined","concat","fetch","sent","abrupt","json","then","repo","console","log","stop","apply","this","LinkWrapper","RepositoryCardStyle_templateObject","CardWrapper","Card","RepositoryCardStyle_templateObject2","Badge","icon","color","value","style","display","justifyContent","alignItems","fontWeight","height","width","background","borderRadius","padding","margin","fontSize","GetTitle","name","stars","watchers","forks","fontFamily","commonComponents_Badge_Badge","index_es","icons_index_es","RepositoryCard","_ref2","avatar","description","url","elevation","src","alt","action","MoreVert_default","title","RepositoryCard_GetTitle","subheader","Repositories","prop","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","publicRepositories","totalCount","getPublicRepositories","bind","assertThisInitialized","data","setState","items","total_count","map","commonComponents_RepositoryCard_RepositoryCard","owner","avatar_url","html_url","stargazers_count","forks_count","watchers_count","React","App","react_default","createElement","className","components_NavBar_NavBar","Repositories_Repositories","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4gDAEA,IAAMA,EAAUC,IAAOC,IAAVC,KAOPC,EAASH,IAAOC,IAAVG,KAYNC,EAAcL,IAAOM,KAAVC,KAUXC,EAAaR,IAAOS,OAAVC,KAQVC,EAAiBX,IAAOC,IAAVW,IAChBJ,GAIEK,EAAiBb,IAAOC,IAAVa,KAIdC,EAAUf,IAAOC,IAAVe,KAUPC,EAAUjB,IAAOkB,EAAVC,KCjCEC,EAtBU,WACvB,OACEC,EAAA,cAACtB,EAAD,KACEsB,EAAA,cAAClB,EAAD,KACEkB,EAAA,cAACb,EAAD,KACEa,EAAA,cAAChB,EAAD,KACEgB,EAAA,cAACJ,EAAD,CAASK,KAAK,kDAAd,+BAGJD,EAAA,cAACV,EAAD,MAEAU,EAAA,cAACb,EAAD,KACEa,EAAA,cAACR,EAAD,KACEQ,EAAA,cAACN,EAAD,SAAUM,EAAA,cAACJ,EAAD,CAASK,KAAK,kDAAd,oBAAV,KACAD,EAAA,cAACN,EAAD,+FCIGQ,EAZS,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAT,EAAAU,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,UAAA,OAAAX,EAAAT,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAOZ,EAAPO,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAkB,aAAcN,EAAhCM,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAAyC,QAClEL,EADyBK,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GACf,OAAQJ,EADOI,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GACM,IAAKH,EADXG,EAAAM,OAAA,QAAAC,IAAAP,EAAA,GAAAA,EAAA,GAC4B,IAC/CF,EAAM,6CACVA,GAAG,YAAAU,OAAgBX,GAAhBW,OAAiCZ,EAAjC,cAAAY,OAAwDf,EAAxD,UAAAe,OAAyEd,EAAzE,WAAAc,OAAyFb,GAHrEQ,EAAAE,KAAA,EAKHI,MAAMX,GALH,cAKjBC,EALiBI,EAAAO,KAAAP,EAAAQ,OAAA,SAMhBZ,EAAMa,OAAOC,KAAK,SAAAC,GAEvB,OADAC,QAAQC,IAAI,gBAAiBF,GACtBA,KARc,yBAAAX,EAAAc,SAAAzB,MAAH,yBAAAL,EAAA+B,MAAAC,KAAAlB,YAAA,2ZCNxB,IAAMmB,EAAkBzD,IAAOkB,EAAVwC,KAKfC,EAAmB3D,YAAO4D,IAAP5D,CAAH6D,KCMPC,EANiB,SAAAtC,GAA0B,IAAxBuC,EAAwBvC,EAAxBuC,KAAMC,EAAkBxC,EAAlBwC,MAAOC,EAAWzC,EAAXyC,MAC7C,OAAO5C,EAAA,qBAAK6C,MAAO,CAACC,QAAS,OAAQC,eAAgB,eAAgBC,WAAY,SAAUL,MAAO,OAAQM,WAAY,IAAKC,OAAQ,GAAIC,MAAO,GAAIC,WAAYT,EAAOU,aAAc,EAAGC,QAAS,EAAGC,OAAQ,EAAGC,SAAU,KACrNZ,EADK,IACGF,YCgBNe,EAA4B,SAAAtD,GAA8C,IAA5CuD,EAA4CvD,EAA5CuD,KAAMC,EAAsCxD,EAAtCwD,MAAOC,EAA+BzD,EAA/ByD,SAAUC,EAAqB1D,EAArB0D,MAAOpD,EAAcN,EAAdM,SAChE,OACET,EAAA,qBAAK6C,MAAO,CAACiB,WAAY,SAAUb,WAAY,MAC7CjD,EAAA,qBAAK6C,MAAO,CAACC,QAAS,OAAQC,eAAe,gBAAiBC,WAAY,WACxEhD,EAAA,sBAAM6C,MAAO,CAACF,MAAO,YAAaa,SAAU,YAAaE,GACzD1D,EAAA,qBAAK6C,MAAO,CAACC,QAAS,OAAQC,eAAgB,eAC5C/C,EAAA,cAAC+D,EAAD,CAAOrB,KAAM1C,EAAA,cAACgE,EAAA,EAAD,CAAMnB,MAAO,CAACF,MAAO,SAAS3C,EAAA,cAACiE,EAAA,EAAD,CAAMT,SAAS,WAAmBZ,MAAOe,EAAOhB,MAAM,WACjG3C,EAAA,cAAC+D,EAAD,CAAOrB,KAAM1C,EAAA,cAACgE,EAAA,EAAD,CAAMnB,MAAO,CAACF,MAAO,SAAS3C,EAAA,cAACiE,EAAA,EAAD,CAAUT,SAAS,WAAmBZ,MAAOiB,EAAOlB,MAAM,YACrG3C,EAAA,cAAC+D,EAAD,CAAOrB,KAAM1C,EAAA,cAACgE,EAAA,EAAD,CAAMnB,MAAO,CAACF,MAAO,SAAS3C,EAAA,cAACiE,EAAA,EAAD,CAAYT,SAAS,WAAmBZ,MAAOgB,EAAUjB,MAAM,WAK9G3C,EAAA,0BAAOS,KA0BEyD,EArByB,SAAAC,GAAwE,IAAtEC,EAAsED,EAAtEC,OAAQV,EAA8DS,EAA9DT,KAAMW,EAAwDF,EAAxDE,YAAaC,EAA2CH,EAA3CG,IAAKX,EAAsCQ,EAAtCR,MAAOE,EAA+BM,EAA/BN,MAAOD,EAAwBO,EAAxBP,SAAUnD,EAAc0D,EAAd1D,SAChG,OACET,EAAA,cAACoC,EAAD,CAAanC,KAAMqE,GACjBtE,EAAA,cAACsC,EAAD,CAAaiC,UAAU,KACrBvE,EAAA,cAACgE,EAAA,EAAD,CACEI,OACEpE,EAAA,qBAAKwE,IAAKJ,EAAQjB,MAAM,OAAOD,OAAO,OAAOuB,IAAKf,IAEpDgB,OACE1E,EAAA,cAACgE,EAAA,EAAD,KACEhE,EAAA,cAAC2E,EAAA9E,EAAD,OAGJ+E,MAAO5E,EAAA,cAAC6E,EAAD,CAAUnB,KAAMA,EAAMC,MAAOA,EAAOC,SAAUA,EAAUC,MAAOA,EAAOpD,SAAUA,IACvFqE,UAAWT,OChCAU,cAKnB,SAAAA,EAAYC,GAAU,IAAAC,EAAA,OAAA7E,OAAA8E,EAAA,EAAA9E,CAAA+B,KAAA4C,IACpBE,EAAA7E,OAAA+E,EAAA,EAAA/E,CAAA+B,KAAA/B,OAAAgF,EAAA,EAAAhF,CAAA2E,GAAAM,KAAAlD,KAAM6C,KALDM,MAAe,CACpBC,mBAAoB,GACpBC,WAAY,GAIZP,EAAKQ,sBAAwBR,EAAKQ,sBAAsBC,KAA3BtF,OAAAuF,EAAA,EAAAvF,CAAA6E,IAFTA,qNAKD/E,YAAb0F,WAEJzD,KAAK0D,SAAS,CACZN,mBAAoBK,EAAKE,MAAQF,EAAKE,MAAQ,GAC9CN,WAAYI,EAAKG,YAAcH,EAAKG,YAAc,kJAMtD5D,KAAKsD,yDAIL,OACEzF,EAAA,cAACA,EAAA,SAAD,KAEEmC,KAAKmD,MAAMC,mBAAmBS,IAAI,SAAClE,GACjC,OACE9B,EAAA,cAACiG,EAAD,CACE7B,OAAQtC,EAAKoE,MAAMC,WACnBzC,KAAM5B,EAAK4B,KACXW,YAAavC,EAAKuC,YAClBC,IAAKxC,EAAKsE,SACVzC,MAAO7B,EAAKuE,iBACZxC,MAAO/B,EAAKwE,YACZ1C,SAAU9B,EAAKyE,eACf9F,SAAUqB,EAAKrB,qBArCa+F,aCS3BC,WA9BO,WACpB,OACEC,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,OACbF,EAAA7G,EAAA8G,cAACE,EAAD,MACAH,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,aACbF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,6BACfF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,OACbF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,kBAEfF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,yBACbF,EAAA7G,EAAA8G,cAAA,wMAEFD,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,oBAIjBF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,OACbF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,kBAEfF,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,yBACbF,EAAA7G,EAAA8G,cAACG,EAAD,OAEFJ,EAAA7G,EAAA8G,cAAA,OAAKC,UAAU,uBCfLG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAA7G,EAAA8G,cAACW,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9F,KAAK,SAAA+F,GACjCA,EAAaC","file":"static/js/main.f95ccba1.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative!important;\n  background: #23282e;\n  height: 64px;\n  color: #FFF;\n`;\n\nconst Header = styled.div`\n  align-items: center;\n  display: flex;\n  flex-wrap: nowrap;\n  background-color: #24292e;\n  color: hsla(0,0%,100%,.7);\n  font-size: 14px;\n  line-height: 1.5;\n  padding: 16px;\n  z-index: 32;\n`;\n\nconst HeaderTitle = styled.span`\n  font-family: hack;\n  font-size: 16px;\n  font-weight: 600;\n  color: #FFF;\n  :hover {\n    color: #97a2a4;\n  }\n`;\n\nconst HeaderItem = styled.header`\n  align-items: center;\n  display: flex;\n  flex-wrap: nowrap;\n  align-self: stretch;\n  margin-right: 16px;\n`;\n\nconst HeaderItemFull = styled.div`\n  ${HeaderItem};\n  flex: auto;\n`;\n\nconst NavLinkWrapper = styled.div`\n  display: flex!important;\n`;\n\nconst NavLink = styled.div`\n  margin-right: 16px;\n  color: #fff;\n  font-weight: 600;\n  white-space: nowrap;\n  :hover {\n    color: #97a2a4;\n  }\n`;\n\nconst NoDecor = styled.a`\n  text-decoration: none;\n  color: inherit;\n`;\n\nexport {\n  Wrapper,\n  Header,\n  HeaderTitle,\n  HeaderItem,\n  HeaderItemFull,\n  NavLinkWrapper,\n  NavLink,\n  NoDecor\n};\n","import * as React from \"react\";\nimport {Wrapper, Header, HeaderTitle, HeaderItem, HeaderItemFull, NavLinkWrapper, NavLink, NoDecor} from \"./NavBarStyle\";\n\nconst NavBar: React.FC = () => {\n  return (\n    <Wrapper>\n      <Header>\n        <HeaderItem>\n          <HeaderTitle>\n            <NoDecor href=\"https://lakkanna.github.io/contributors.board/\"> Contributors Rank Board </NoDecor>\n          </HeaderTitle>\n        </HeaderItem>\n        <HeaderItemFull>\n        </HeaderItemFull>\n        <HeaderItem>\n          <NavLinkWrapper>\n            <NavLink> <NoDecor href=\"https://github.com/Lakkanna/contributors.board\"> Contribute Now </NoDecor> </NavLink>\n            <NavLink> Signin </NavLink>\n          </NavLinkWrapper>\n        </HeaderItem>\n      </Header>\n    </Wrapper>\n  );\n};\n\nexport default NavBar;\n","\ntype items = {\n  name: string\n}\ninterface IResponse {\n  items: items[];\n  total_count: number\n}\n\nconst searchRepositories = async (language = \"javascript\", sortBy = \"stars\",\n  orderBy = \"desc\", starsCount = 100, starsCondition = \">\"): Promise<IResponse> => {\n    let URL = \"https://api.github.com/search/repositories\";\n    URL += `?q=stars:${starsCondition}${starsCount}+language:${language}&sort=${sortBy}&order=${orderBy}`;\n\n    const repos = await fetch(URL);\n    return repos.json().then(repo => {\n      console.log(\"Repositories \", repo);\n      return repo;\n    });\n};\n\nexport default searchRepositories;\n","import styled from \"styled-components\";\nimport { Card } from \"@material-ui/core\";\n\nconst LinkWrapper:any = styled.a`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst CardWrapper: any = styled(Card)`\n  transition: 0.2s all ease-in-out;\n  margin-bottom: 10px;\n  :hover {\n    box-shadow: 0px 1px 3px 0px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 2px 1px -1px rgba(0,0,0,0.12)\n  }\n`;\n\nexport {\n  LinkWrapper,\n  CardWrapper\n}","import * as React from \"react\";\n\ninterface IProps {\n  icon: JSX.Element;\n  value: string | number;\n  color: string;\n}\n\nconst Badge: React.FC<IProps> = ({icon, color, value}) => {\n  return <div style={{display: \"flex\", justifyContent: \"space-evenly\", alignItems: \"center\", color: \"#FFF\", fontWeight: 600, height: 23, width: 90, background: color, borderRadius: 4, padding: 2, margin: 2, fontSize: 12}}>\n   {value} {icon}\n  </div>\n}\n\nexport default Badge;\n","import * as React from \"react\";\nimport { CardHeader, IconButton, Icon } from \"@material-ui/core\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { LinkWrapper, CardWrapper } from \"./RepositoryCardStyle\";\nimport Badge from \"../Badge/Badge\";\nimport {Star, Visibility, Timeline} from \"@material-ui/icons\";\n\ntype IData = {\n  avatar: string;\n  name: string;\n  description: string;\n  url: string;\n  stars: string | number;\n  forks: string | number;\n  watchers: string | number;\n  language: string;\n}\n\ntype Title = {\n  name: string;\n  stars: string | number;\n  watchers: string | number;\n  forks: string | number;\n  language: string;\n}\n\nconst GetTitle: React.FC<Title> = ({name, stars, watchers, forks, language}) => {\n  return (\n    <div style={{fontFamily: \"ubuntu\", fontWeight: 600}}>\n      <div style={{display: \"flex\", justifyContent:\"space-between\", alignItems: \"center\"}}>\n        <span style={{color: \"#00000099\", fontSize: \"x-large\"}}>{name}</span>\n        <div style={{display: \"flex\", justifyContent: \"flex-start\"}}>\n          <Badge icon={<Icon style={{color: \"#FFF\"}}><Star fontSize=\"small\" /></Icon>} value={stars} color=\"orange\" />\n          <Badge icon={<Icon style={{color: \"#FFF\"}}><Timeline fontSize=\"small\" /></Icon>} value={forks} color=\"#67c856\" />\n          <Badge icon={<Icon style={{color: \"#FFF\"}}><Visibility fontSize=\"small\" /></Icon>} value={watchers} color=\"grey\" />\n        </div>\n      </div>\n      \n      \n      <span>{language}</span>\n    </div>\n  );\n};\n\nconst RepositoryCard: React.FC<IData> = ({avatar, name, description, url, stars, forks, watchers, language}) => {\n  return (\n    <LinkWrapper href={url}>\n      <CardWrapper elevation=\"4\">\n        <CardHeader\n          avatar={\n            <img src={avatar} width=\"50px\" height=\"50px\" alt={name} />\n          }\n          action={\n            <IconButton>\n              <MoreVertIcon />\n            </IconButton>\n          }\n          title={<GetTitle name={name} stars={stars} watchers={watchers} forks={forks} language={language} />}\n          subheader={description}\n        />\n      </CardWrapper>\n    </LinkWrapper>\n  );\n}\n\nexport default RepositoryCard;\n","import * as React from \"react\";\nimport searchRepositories from \"../../api/searchRepositories\";\nimport RepositoryCard from \"../../commonComponents/RepositoryCard/RepositoryCard\";\n\nexport type avatar = {\n  avatar_url: string;\n}\n\nexport interface IRepositories {\n  id: string;\n  name: string;\n  created_at: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  watchers_count: number;\n  owner: avatar,\n  html_url: string;\n  language: string;\n}\n\ninterface State {\n  publicRepositories: [];\n  totalCount: number;\n}\n\nexport default class Repositories extends React.Component<{}, {}> {\n  public state: State = {\n    publicRepositories: [],\n    totalCount: 0\n  }\n  constructor(prop: {}) {\n    super(prop);\n    this.getPublicRepositories = this.getPublicRepositories.bind(this);\n  }\n  async getPublicRepositories() {\n    const data = await searchRepositories();\n    if (data) {\n      this.setState({\n        publicRepositories: data.items ? data.items : [],\n        totalCount: data.total_count ? data.total_count : 0\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.getPublicRepositories();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      {\n        this.state.publicRepositories.map((repo: IRepositories) => {\n          return (\n            <RepositoryCard\n              avatar={repo.owner.avatar_url}\n              name={repo.name}\n              description={repo.description}\n              url={repo.html_url}\n              stars={repo.stargazers_count}\n              forks={repo.forks_count}\n              watchers={repo.watchers_count}\n              language={repo.language}\n            />\n          )\n        })\n      }\n      </React.Fragment>\n    ) ;\n  }\n}","import React from 'react';\nimport NavBar from './components/NavBar/NavBar';\nimport Repositories from \"./components/Repositories/Repositories\";\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <div className=\"col-sm-12\">\n        <div className=\"content pagehead repohead\">\n        <div className=\"row\">\n          <div className=\"col-sm-1 side\">\n          </div>\n          <div className=\"col-sm-8 content-text\">\n            <b>List of contributors for the repository, sorted based on number commits of major bugs. Click on Contributors name to get report of contribution and history on other open source projects.</b>\n          </div>\n          <div className=\"col-sm-1 side\">\n          </div>\n        </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-sm-1 side\">\n          </div>\n          <div className=\"col-sm-8 content-text\">\n            <Repositories />\n          </div>\n          <div className=\"col-sm-1 side\">\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}